
# -*- coding: utf-8 -*-
"""akbank_finalcase.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11kzMlY1cB79PLK1TYgNUJddXjKJHINXV
"""

# 1. ADIM: GEREKLİ KÜTÜPHANELERİ YÜKLEYELİM
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Türkçe karakterler için
plt.rcParams['font.family'] = 'DejaVu Sans'

# Görselleştirme ayarları
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")
sns.set_palette("husl")

# UPLOAD EDİLMİŞ DOSYALAR
import os
uploaded_files = [f for f in os.listdir('.') if f.endswith('.csv')]
print(f"Yüklenen CSV dosyaları: {uploaded_files}")

# Dosyaları otomatik tanıyalım
users = None
transactions = None

for file in uploaded_files:
    print(f" {file} dosyası kontrol ediliyor...")

    # Dosya isminden tahmin et
    if 'user' in file.lower():
        users = pd.read_csv(file, low_memory=False)
        print(f" Users dosyası bulundu: {file} - Boyut: {users.shape}")

    elif 'transaction' in file.lower():
        transactions = pd.read_csv(file, low_memory=False)
        print(f" Transactions dosyası bulundu: {file} - Boyut: {transactions.shape}")

# Eğer otomatik tanıma çalışmazsa manuel yükleme
if users is None or transactions is None:
    print("\n⚠️ Otomatik tanıma başarısız! Manuel yükleme...")
    print("Dosya isimlerini kontrol edelim:")

    for i, file in enumerate(uploaded_files):
        temp_df = pd.read_csv(file, nrows=5)  # İlk 5 satırı oku
        print(f"\n{i+1}. {file}:")
        print(f"   Kolonlar: {list(temp_df.columns)}")
        print(f"   Boyut: {pd.read_csv(file).shape}")

# ADIM 2: VERİ İNCELEME
if users is not None and transactions is not None:
    print("\n" + "="*60)
    print(" VERİ SETLERİ DETAYLI İNCELEME")
    print("="*60)

    # Users veri seti
    print("USERS VERİ SETİ:")
    print(f"   Boyut: {users.shape[0]} satır, {users.shape[1]} kolon")
    print(f"   Kolonlar: {list(users.columns)}")
    print("   İlk 3 satır:")
    print(users.head(3))
    print(f"   Veri tipleri:\n{users.dtypes}")

    print("\n TRANSACTIONS VERİ SETİ:")
    print(f"   Boyut: {transactions.shape[0]} satır, {transactions.shape[1]} kolon")
    print(f"   Kolonlar: {list(transactions.columns)}")
    print("   İlk 3 satır:")
    print(transactions.head(3))
    print(f"   Veri tipleri:\n{transactions.dtypes}")

# ADIM 3: EKSİK VERİ KONTROLÜ

print("EKSİK VERİ KONTROLÜ:")
print("Users eksik veriler:")
users_null = users.isnull().sum()
print(users_null[users_null > 0] if users_null.sum() > 0 else "   Eksik veri yok!")

print("\nTransactions eksik veriler:")
trans_null = transactions.isnull().sum()
print(trans_null[trans_null > 0] if trans_null.sum() > 0 else "   Eksik veri yok!")

# ADIM 4: VERİ TEMİZLEME
print("\n VERİ TEMİZLEME...")
users_clean = users.dropna()
transactions_clean = transactions.dropna()

print(f"Users: {users.shape[0]} → {users_clean.shape[0]} satır (temizlendi)")
print(f"Transactions: {transactions.shape[0]} → {transactions_clean.shape[0]} satır (temizlendi)")

# ADIM 5: VERİ BİRLEŞTİRME HAZIRLIĞI

print(" VERİ BİRLEŞTİRME HAZIRLIĞI:")
print("-" * 40)

# Verilerin yüklü olup olmadığını kontrol et
try:
    print(f"Users veri boyutu: {users_clean.shape}")
    print(f"Transactions veri boyutu: {transactions_clean.shape}")
except NameError:
    print(" HATA: users_clean veya transactions_clean bulunamadı!")
    print("Önce veri yükleme kodlarını çalıştır!")
    print("\n Manuel yükleme için:")
    print("users_clean = pd.read_csv('users.csv').dropna()")
    print("transactions_clean = pd.read_csv('transactions.csv').dropna()")
    exit()

# Ortak kolonları bul
common_cols = set(users_clean.columns) & set(transactions_clean.columns)
print(f"\n Ortak kolonlar: {list(common_cols)}")

# Tüm kolonları da göster
print(f"\n Users kolonları: {list(users_clean.columns)}")
print(f" Transactions kolonları: {list(transactions_clean.columns)}")

# Muhtemel birleştirme kolonlarını tespit et
merge_candidates = []
for col in common_cols:
    if any(keyword in col.lower() for keyword in ['user', 'id', 'customer']):
        merge_candidates.append(col)

print(f"\n Muhtemel birleştirme kolonları: {merge_candidates}")

# Birleştirme işlemi
if len(merge_candidates) > 0:
    merge_col = merge_candidates[0]
    print(f"\n Seçilen birleştirme kolonu: '{merge_col}'")

    # Birleştirmeden önce veri kontrolü
    print(f"\nUsers '{merge_col}' benzersiz değer sayısı: {users_clean[merge_col].nunique()}")
    print(f"Transactions '{merge_col}' benzersiz değer sayısı: {transactions_clean[merge_col].nunique()}")

    # Veriyi birleştir
    print("\n Veriler birleştiriliyor...")
    merged_data = pd.merge(transactions_clean, users_clean, on=merge_col, how='inner')
    print(f" Birleştirilmiş veri boyutu: {merged_data.shape}")

    # Birleştirilmiş veriyi kontrol et
    print(f"\n Birleştirilmiş veri kolonları:")
    for i, col in enumerate(merged_data.columns, 1):
        print(f"   {i}. {col}")

    print(f"\n İlk 3 satır:")
    print(merged_data.head(3))

    print(f"\n🎉 VERİ BAŞARIYLA BİRLEŞTİRİLDİ!")
    print(" Grafik çizmeye hazırız!")

else:
    print("\n⚠️ Otomatik birleştirme kolonu bulunamadı!")
    print("Manuel olarak kolon seçmen gerekiyor.")
    print(f"Ortak kolonlar: {list(common_cols)}")

    # Manuel seçim için öneriler
    if len(common_cols) > 0:
        print("\n Manuel birleştirme için şunları dene:")
        for col in common_cols:
            print(f"merged_data = pd.merge(transactions_clean, users_clean, on='{col}', how='inner')")
    else:
        print(" Hiç ortak kolon yok! Veri setlerini kontrol et!")

# GRAFİK 1: EN FAZLA HARCAMA YAPILAN ŞEHİRLER

import matplotlib.pyplot as plt
import numpy as np

print(" GRAFİK 1: En Fazla Harcama Yapılan Şehirler")
print("=" * 50)

# Şehir kolonunu kontrol et
print(" Mevcut kolonları kontrol ediyoruz...")
city_columns = ['Merchant City', 'City', 'Merchant_City', 'merchant_city']
city_col = None

for col in city_columns:
    if col in merged_data.columns:
        city_col = col
        print(f" Şehir kolonu bulundu: '{col}'")
        break

if city_col is None:
    print(" Şehir kolonu bulunamadı!")
    print(f"Mevcut kolonlar: {list(merged_data.columns)}")
    print("Hangi kolon şehir bilgisini içeriyor?")
else:
    # Amount kolonunu kontrol et
    amount_columns = ['Amount', 'amount', 'Price', 'Transaction Amount']
    amount_col = None

    for col in amount_columns:
        if col in merged_data.columns:
            amount_col = col
            print(f" Harcama kolonu bulundu: '{col}'")
            break

    if amount_col is None:
        print(" Harcama kolonu bulunamadı!")
        print(f"Mevcut kolonlar: {list(merged_data.columns)}")
    else:
        # Şehirlere göre toplam harcama hesapla
        print(f"\n Şehirlere göre harcama hesaplanıyor...")
        city_spending = merged_data.groupby(city_col)[amount_col].sum().sort_values(ascending=False)

        # İlk 10 şehir
        top_10_cities = city_spending.head(10)

        print(f" Toplam {len(city_spending)} şehir bulundu")
        print(f" En fazla harcama yapılan ilk 10 şehir:")

        for i, (city, amount) in enumerate(top_10_cities.items(), 1):
            print(f"   {i:2d}. {city}: ${amount:,.2f}")



        plt.figure(figsize=(14, 8))

        # Renk paleti
        colors = plt.cm.Set3(np.linspace(0, 1, len(top_10_cities)))

        # Bar grafik
        bars = plt.bar(range(len(top_10_cities)), top_10_cities.values,
                       color=colors, alpha=0.8, edgecolor='black', linewidth=1)

        # Grafik başlığı ve etiketler
        plt.title('En Fazla Harcama Yapılan İlk 10 Şehir',
                  fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('Şehirler', fontsize=12)
        plt.ylabel('Toplam Harcama ($)', fontsize=12)

        # X ekseni etiketleri (şehir isimleri)
        plt.xticks(range(len(top_10_cities)), top_10_cities.index,
                   rotation=45, ha='right')

        # Bar üzerine değerleri yazdır
        for i, v in enumerate(top_10_cities.values):
            plt.text(i, v + max(top_10_cities.values) * 0.01,
                     f'${v:,.0f}',
                     ha='center', va='bottom', fontweight='bold', fontsize=10)

        # Grid ve düzen
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()

        # Grafiği göster
        plt.show()

        # Sonuç analizi
        print(f"\n ANALİZ SONUÇLARI:")
        print(f" En fazla harcama yapılan şehir: {top_10_cities.index[0]}")
        print(f" Bu şehirdeki toplam harcama: ${top_10_cities.iloc[0]:,.2f}")

        # Yüzdelik analiz
        total_spending = city_spending.sum()
        top_3_percentage = (top_10_cities.iloc[:3].sum() / total_spending) * 100
        top_10_percentage = (top_10_cities.sum() / total_spending) * 100

        print(f" İlk 3 şehir toplam harcamanın %{top_3_percentage:.1f}'ini oluşturuyor")
        print(f" İlk 10 şehir toplam harcamanın %{top_10_percentage:.1f}'ini oluşturuyor")

        print(f"\n YORUM:")
        if top_3_percentage > 50:
            print("   → Harcama büyük şehirlerde yoğunlaşmış durumda")
        elif top_10_percentage > 70:
            print("   → Harcama belirli şehirlerde toplanmış")
        else:
            print("   → Harcama şehirler arasında daha dengeli dağılmış")

# GRAFİK 2: SAATLİK HARCAMA DAĞILIMI
# Çizgi grafik ile saatlik harcama desenini

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

print(" GRAFİK 2: Saatlik Harcama Dağılımı")
print("=" * 50)

# Zaman kolonunu bul
print(" Zaman kolonunu arıyoruz...")
time_columns = ['Time', 'Timestamp', 'Date', 'DateTime', 'time', 'timestamp', 'Transaction Time']
time_col = None

for col in time_columns:
    if col in merged_data.columns:
        time_col = col
        print(f" Zaman kolonu bulundu: '{col}'")
        break

if time_col is None:
    print(" Zaman kolonu bulunamadı!")
    print(f"Mevcut kolonlar: {list(merged_data.columns)}")
    print("Hangi kolon zaman bilgisini içeriyor?")
    print("\n Manuel çözüm:")
    print("time_col = 'KOLON_ISMI'  # Zaman kolonunun ismini yaz")
else:
    # Amount kolonunu kontrol et (önceki adımdan)
    amount_columns = ['Amount', 'amount', 'Price', 'Transaction Amount']
    amount_col = None

    for col in amount_columns:
        if col in merged_data.columns:
            amount_col = col
            break

    print(f" Harcama kolonu: '{amount_col}'")

    # Zaman kolonunu datetime'a çevir
    print(f"\n Zaman verisi işleniyor...")

    try:
        # Zaman kolonunu datetime'a çevir
        merged_data[time_col] = pd.to_datetime(merged_data[time_col])

        # Saat bilgisini çıkart
        merged_data['Hour'] = merged_data[time_col].dt.hour

        print(f" Zaman verisi başarıyla işlendi")
        print(f" Saat aralığı: {merged_data['Hour'].min()}:00 - {merged_data['Hour'].max()}:00")

        # Saatlik harcama hesapla
        print(f"\n Saatlik harcamalar hesaplanıyor...")
        hourly_spending = merged_data.groupby('Hour')[amount_col].sum()

        print(f" 24 saat için harcama hesaplandı")

        # Saatlik istatistikler
        print(f"\n SAATLİK İSTATİSTİKLER:")
        for hour in range(0, 24, 4):  # 4 saatte bir göster
            if hour in hourly_spending.index:
                print(f"   {hour:02d}:00 - ${hourly_spending[hour]:,.2f}")

        # En yoğun ve en az harcama saatleri
        peak_hour = hourly_spending.idxmax()
        peak_amount = hourly_spending.max()
        min_hour = hourly_spending.idxmin()
        min_amount = hourly_spending.min()

        print(f"\n En yoğun harcama saati: {peak_hour}:00 - ${peak_amount:,.2f}")
        print(f" En az harcama saati: {min_hour}:00 - ${min_amount:,.2f}")

        # Grafik çizimi
        print(f"\n Çizgi grafik hazırlanıyor...")

        plt.figure(figsize=(16, 8))

        # Çizgi grafik
        plt.plot(hourly_spending.index, hourly_spending.values,
                 marker='o', linewidth=3, markersize=8, color='#E74C3C',
                 markerfacecolor='white', markeredgecolor='#E74C3C', markeredgewidth=2)

        # Alan doldurmak için
        plt.fill_between(hourly_spending.index, hourly_spending.values,
                         alpha=0.3, color='#E74C3C')

        # Grafik başlığı ve etiketler
        plt.title('Saatlik Harcama Dağılımı', fontsize=18, fontweight='bold', pad=20)
        plt.xlabel('Saat', fontsize=14)
        plt.ylabel('Toplam Harcama ($)', fontsize=14)

        # X ekseni (0-23 saat)
        plt.xticks(range(0, 24, 2))  # 2 saatte bir göster

        # En yoğun saati işaretle
        plt.annotate(f'En Yoğun Saat\n{peak_hour}:00\n${peak_amount:,.0f}',
                     xy=(peak_hour, peak_amount),
                     xytext=(peak_hour+2, peak_amount+peak_amount*0.15),
                     arrowprops=dict(arrowstyle='->', color='red', lw=2),
                     fontsize=12, fontweight='bold',
                     bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.8))

        # Grid
        plt.grid(True, alpha=0.3)
        plt.tight_layout()

        # Grafiği göster
        plt.show()

        # Zaman dilimi analizi
        print(f"\n ZAMAN DİLİMİ ANALİZİ:")

        # Zaman dilimlerini tanımla
        morning = hourly_spending.loc[6:11].sum() if len(hourly_spending.loc[6:11]) > 0 else 0
        afternoon = hourly_spending.loc[12:17].sum() if len(hourly_spending.loc[12:17]) > 0 else 0
        evening = hourly_spending.loc[18:23].sum() if len(hourly_spending.loc[18:23]) > 0 else 0
        night = hourly_spending.loc[0:5].sum() if len(hourly_spending.loc[0:5]) > 0 else 0

        time_periods = {
            'Sabah (06-11)': morning,
            'Öğleden Sonra (12-17)': afternoon,
            'Akşam (18-23)': evening,
            'Gece (00-05)': night
        }

        # En yoğun zaman dilimi
        if max(time_periods.values()) > 0:
            busiest_period = max(time_periods, key=time_periods.get)

            for period, amount in time_periods.items():
                percentage = (amount / hourly_spending.sum()) * 100 if hourly_spending.sum() > 0 else 0
                print(f"   {period}: ${amount:,.2f} (%{percentage:.1f})")

            print(f"\n En yoğun zaman dilimi: {busiest_period}")

        # Yorumlar
        print(f"\n YORUMLAR:")
        if peak_hour >= 9 and peak_hour <= 17:
            print("   → En yoğun harcama iş saatlerinde gerçekleşiyor")
        elif peak_hour >= 18 and peak_hour <= 22:
            print("   → En yoğun harcama akşam saatlerinde")
        elif peak_hour >= 6 and peak_hour <= 11:
            print("   → En yoğun harcama sabah saatlerinde")
        else:
            print("   → En yoğun harcama gece/erken sabah saatlerinde")

        # Harcama düzenliliği
        std_dev = hourly_spending.std()
        mean_spending = hourly_spending.mean()
        cv = std_dev / mean_spending if mean_spending > 0 else 0

        if cv < 0.3:
            print("   → Harcama saatler boyunca oldukça düzenli")
        elif cv < 0.6:
            print("   → Harcama saatler arasında orta düzeyde değişiyor")
        else:
            print("   → Harcama saatler arasında büyük farklılıklar gösteriyor")


    except Exception as e:
        print(f" Zaman verisi işlenirken hata: {e}")
        print("Zaman kolonunun formatını kontrol et")
        print(f"İlk birkaç zaman değeri: {merged_data[time_col].head()}")

# GRAFİK 3: CİNSİYETE GÖRE HARCAMA KARŞILAŞTIRMASI
# Bar grafik ile kadın vs erkek harcamaları karşılaştırması

import matplotlib.pyplot as plt
import numpy as np

print(" GRAFİK 3: Cinsiyete Göre Harcama Karşılaştırması")
print("=" * 60)

# Cinsiyet kolonunu bul
print(" Cinsiyet kolonunu arıyoruz...")
gender_columns = ['Gender', 'gender', 'Sex', 'sex', 'M/F', 'Cinsiyet']
gender_col = None

for col in gender_columns:
    if col in merged_data.columns:
        gender_col = col
        print(f" Cinsiyet kolonu bulundu: '{col}'")
        break

if gender_col is None:
    print(" Cinsiyet kolonu bulunamadı!")
    print(f"Mevcut kolonlar: {list(merged_data.columns)}")
    print("Hangi kolon cinsiyet bilgisini içeriyor?")
    print("\n Manuel çözüm:")
    print("gender_col = 'KOLON_ISMI'  # Cinsiyet kolonunun ismini yaz")
else:
    # Amount kolonunu al (önceki adımlardan)
    amount_columns = ['Amount', 'amount', 'Price', 'Transaction Amount']
    amount_col = None

    for col in amount_columns:
        if col in merged_data.columns:
            amount_col = col
            break

    print(f" Harcama kolonu: '{amount_col}'")

    # Cinsiyet değerlerini kontrol et
    print(f"\n Cinsiyet değerleri inceleniyor...")
    gender_values = merged_data[gender_col].value_counts()
    print(f"Benzersiz cinsiyet değerleri:")
    for gender, count in gender_values.items():
        print(f"   {gender}: {count} kişi")

    # Cinsiyete göre toplam harcama hesapla
    print(f"\n Cinsiyete göre harcama hesaplanıyor...")
    gender_spending = merged_data.groupby(gender_col)[amount_col].sum().sort_values(ascending=False)

    print(f" Cinsiyet bazlı harcamalar hesaplandı")

    # Detaylı istatistikler
    total_spending = gender_spending.sum()
    user_counts = merged_data.groupby(gender_col)['User'].nunique() if 'User' in merged_data.columns else merged_data.groupby(gender_col)[gender_col].count()

    print(f"\n DETAYLI İSTATİSTİKLER:")
    for gender in gender_spending.index:
        spending = gender_spending[gender]
        percentage = (spending / total_spending) * 100
        user_count = user_counts[gender] if gender in user_counts.index else 0
        avg_per_user = spending / user_count if user_count > 0 else 0

        print(f"   {gender}:")
        print(f"       Toplam Harcama: ${spending:,.2f} (%{percentage:.1f})")
        print(f"       Kullanıcı Sayısı: {user_count}")
        print(f"       Kullanıcı Başına Ort.: ${avg_per_user:,.2f}")

    # Grafik çizimi
    print(f"\n Bar grafik hazırlanıyor...")

    plt.figure(figsize=(12, 8))

    # Renk seçimi
    if len(gender_spending) == 2:
        colors = ['#3498DB', '#E91E63']  # Mavi ve Pembe
    else:
        colors = plt.cm.Set2(np.linspace(0, 1, len(gender_spending)))

    # Bar grafik
    bars = plt.bar(gender_spending.index, gender_spending.values,
                   color=colors, alpha=0.8, edgecolor='black', linewidth=2)

    # Grafik başlığı ve etiketler
    plt.title('Cinsiyete Göre Toplam Harcama Karşılaştırması',
              fontsize=18, fontweight='bold', pad=20)
    plt.xlabel('Cinsiyet', fontsize=14)
    plt.ylabel('Toplam Harcama ($)', fontsize=14)

    # Bar üzerine değerleri ve yüzdeleri yazdır
    for i, (bar, value) in enumerate(zip(bars, gender_spending.values)):
        percentage = (value / total_spending) * 100
        plt.text(bar.get_x() + bar.get_width()/2,
                 bar.get_height() + max(gender_spending.values) * 0.02,
                 f'${value:,.0f}\n(%{percentage:.1f})',
                 ha='center', va='bottom', fontweight='bold', fontsize=12,
                 bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))

    # Grid
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()

    # Grafiği göster
    plt.show()

    # Sonuç analizi
    print(f"\n ANALİZ SONUÇLARI:")

    # En fazla harcayan cinsiyet
    top_gender = gender_spending.index[0]
    top_amount = gender_spending.iloc[0]

    print(f" En fazla harcama yapan: {top_gender}")
    print(f" Harcama miktarı: ${top_amount:,.2f}")

    # Harcama farkı analizi
    if len(gender_spending) == 2:
        diff_amount = gender_spending.iloc[0] - gender_spending.iloc[1]
        diff_percentage = (diff_amount / gender_spending.iloc[1]) * 100

        print(f" Harcama farkı: ${diff_amount:,.2f} (%{diff_percentage:.1f})")

        if diff_percentage > 20:
            gap_level = "Büyük"
        elif diff_percentage > 10:
            gap_level = "Orta"
        else:
            gap_level = "Küçük"

        print(f" Fark seviyesi: {gap_level}")

    # Kullanıcı başına ortalama karşılaştırması
    print(f"\n KULLANICI BAŞINA ORTALAMA HARCAMA:")
    avg_spendings = {}
    for gender in gender_spending.index:
        user_count = user_counts[gender] if gender in user_counts.index else 1
        avg_spending = gender_spending[gender] / user_count
        avg_spendings[gender] = avg_spending
        print(f"   {gender}: ${avg_spending:,.2f}")

    # En yüksek ortalama harcama
    top_avg_gender = max(avg_spendings, key=avg_spendings.get)
    print(f" En yüksek ortalama harcama: {top_avg_gender}")

    # Yorumlar
    print(f"\n YORUMLAR:")

    if len(gender_spending) == 2:
        genders = list(gender_spending.index)
        if diff_percentage > 15:
            print(f"   → {top_gender} cinsiyeti {genders[1]} cinsiyetinden belirgin şekilde fazla harcama yapıyor")
        elif diff_percentage > 5:
            print(f"   → {top_gender} cinsiyeti {genders[1]} cinsiyetinden biraz daha fazla harcama yapıyor")
        else:
            print("   → Her iki cinsiyet de benzer miktarlarda harcama yapıyor")

    # Pazar payı analizi
    market_share = {}
    for gender, spending in gender_spending.items():
        share = (spending / total_spending) * 100
        market_share[gender] = share

    dominant_gender = max(market_share, key=market_share.get)
    if market_share[dominant_gender] > 60:
        print(f"   → {dominant_gender} cinsiyeti pazarda dominant konumda (%{market_share[dominant_gender]:.1f})")
    elif market_share[dominant_gender] > 55:
        print(f"   → {dominant_gender} cinsiyeti pazarda hafif üstünlük sağlıyor (%{market_share[dominant_gender]:.1f})")
    else:
        print("   → Pazar payları dengeli dağılmış durumda")

# GRAFİK 4: GELİR-HARCAMA İLİŞKİSİ + PROJE TAMAMLAMA
# Son grafik + tüm sonuçların özeti

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

print(" GRAFİK 4: Gelir-Harcama İlişkisi Analizi")
print("=" * 60)

# Gelir kolonunu bul
print(" Gelir kolonunu arıyoruz...")
income_columns = ['Yearly Income - Person', 'Income', 'Annual Income', 'Yearly Income', 'income']
income_col = None

for col in income_columns:
    if col in merged_data.columns:
        income_col = col
        print(f" Gelir kolonu bulundu: '{col}'")
        break

if income_col is None:
    print(" Gelir kolonu bulunamadı!")
    print(f"Mevcut kolonlar: {list(merged_data.columns)}")
    print("Manuel olarak gelir kolonunu belirt:")
    print("income_col = 'KOLON_ISMI'")
else:
    # Amount kolonunu bul
    amount_columns = ['Amount', 'amount', 'Price', 'Transaction Amount']
    amount_col = None

    for col in amount_columns:
        if col in merged_data.columns:
            amount_col = col
            break

    print(f" Harcama kolonu: '{amount_col}'")

    try:
        # Gelir kolonundaki $ işaretini temizle
        print(f"\n🧹 Gelir verisi temizleniyor...")
        merged_data['Income_Numeric'] = merged_data[income_col].astype(str).str.replace('$', '').str.replace(',', '')
        merged_data['Income_Numeric'] = pd.to_numeric(merged_data['Income_Numeric'], errors='coerce')

        print(f" Gelir verisi sayısal formata çevrildi")

        # Kullanıcı bazında toplam harcama hesapla
        print(f" Kullanıcı bazında harcama toplamları hesaplanıyor...")

        # User kolonunu bul
        user_columns = ['User', 'user', 'UserID', 'Customer', 'customer']
        user_col = None

        for col in user_columns:
            if col in merged_data.columns:
                user_col = col
                break

        if user_col:
            user_summary = merged_data.groupby(user_col).agg({
                amount_col: 'sum',
                'Income_Numeric': 'first'
            }).reset_index()

            # NaN değerleri temizle
            user_summary = user_summary.dropna()

            print(f"✅ {len(user_summary)} kullanıcı için veri hazırlandı")

            if len(user_summary) > 0:
                # Scatter plot çiz
                print(f"\n Scatter plot hazırlanıyor...")

                plt.figure(figsize=(16, 10))

                # Scatter plot - renk harcama miktarına göre
                scatter = plt.scatter(user_summary['Income_Numeric'], user_summary[amount_col],
                                   alpha=0.7, s=80, c=user_summary[amount_col], cmap='viridis',
                                   edgecolors='black', linewidth=0.5)

                # Colorbar ekle
                colorbar = plt.colorbar(scatter)
                colorbar.set_label('Harcama Miktarı ($)', fontsize=12)

                # Grafik başlığı ve etiketler
                plt.title('Yıllık Gelir vs Toplam Harcama İlişkisi', fontsize=18, fontweight='bold', pad=20)
                plt.xlabel('Yıllık Gelir ($)', fontsize=14)
                plt.ylabel('Toplam Harcama ($)', fontsize=14)

                # Trend çizgisi ekle
                try:
                    z = np.polyfit(user_summary['Income_Numeric'], user_summary[amount_col], 1)
                    p = np.poly1d(z)
                    x_trend = np.linspace(user_summary['Income_Numeric'].min(), user_summary['Income_Numeric'].max(), 100)
                    plt.plot(x_trend, p(x_trend), "r--", alpha=0.8, linewidth=3, label='Trend Çizgisi')
                    plt.legend(fontsize=12)
                except:
                    print(" Trend çizgisi çizilemedi")

                plt.grid(True, alpha=0.3)
                plt.tight_layout()
                plt.show()

                # Korelasyon hesapla
                correlation = user_summary['Income_Numeric'].corr(user_summary[amount_col])
                print(f"\n KORELASYON ANALİZİ:")
                print(f"Korelasyon katsayısı: {correlation:.3f}")

                # Korelasyon yorumlama
                if correlation > 0.7:
                    corr_strength = "Çok Güçlü Pozitif İlişki"
                elif correlation > 0.5:
                    corr_strength = "Güçlü Pozitif İlişki"
                elif correlation > 0.3:
                    corr_strength = "Orta Düzeyde Pozitif İlişki"
                elif correlation > 0.1:
                    corr_strength = "Zayıf Pozitif İlişki"
                elif correlation > -0.1:
                    corr_strength = "İlişki Yok"
                else:
                    corr_strength = "Negatif İlişki"

                print(f"İlişki durumu: {corr_strength}")

                # Gelir grupları analizi
                print(f"\n GELİR GRUPLARI ANALİZİ:")
                try:
                    user_summary['Income_Group'] = pd.qcut(user_summary['Income_Numeric'], q=5,
                                                         labels=['Çok Düşük', 'Düşük', 'Orta', 'Yüksek', 'Çok Yüksek'])

                    income_group_stats = user_summary.groupby('Income_Group')[amount_col].agg(['mean', 'count']).round(2)

                    for group, row in income_group_stats.iterrows():
                        print(f"   {group}: Ort. ${row['mean']:,.2f} ({int(row['count'])} kullanıcı)")

                    highest_avg_group = income_group_stats['mean'].idxmax()
                    print(f" En yüksek ortalama harcama: {highest_avg_group} gelir grubu")

                except:
                    print("   Gelir grupları oluşturulamadı")

                print(f"\n GRAFİK 4 TAMAMLANDI!")

            else:
                print(" Kullanıcı verisi bulunamadı!")
        else:
            print(" User kolonu bulunamadı!")

    except Exception as e:
        print(f" Hata oluştu: {e}")

# =====================================
# PROJE TAMAMLAMA VE ÖZET SONUÇLAR
# =====================================

print("\n PROJE ÖZETİ - TÜM SONUÇLAR:")
print("-" * 50)

print(" TAMAMLANAN AŞAMALAR:")
print("   1.  Veri Yükleme ve Hazırlık")
print("   2.  Şehirlere Göre Harcama Analizi (Bar Grafik)")
print("   3.  Saatlik Harcama Dağılımı (Çizgi Grafik)")
print("   4.  Cinsiyete Göre Harcama (Bar Grafik)")
print("   5.  Gelir-Harcama İlişkisi (Scatter Plot)")
print("   6.  Yorumlar ve Sonuçlar")
